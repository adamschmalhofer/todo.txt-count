#!/usr/bin/python3

from sys import exit, argv
from re import sub, search, match
from subprocess import run
from os import environ


def usage():
    print("""  Handle count metadata in a todo item:
    count help
      show help information
    count ITEM
      show how many of this item is left
    count ITEM done
      mark an item done and then re-enter it with a decreased (-1) count
    count ITEM do
      alias for count ITEM done
    count ITEM -NUM
      mark NUM items as done at once and re-enter it with -NUM count
    count ITEM +NUM
      mark NUM items as done at once and re-enter it with +NUM count
    count ITEM =NUM
      mark NUM items as done at once and re-enter it with NUM count""")


def error():
    print("Error! Usage:")
    usage()
    exit(1)


def print_count(ITEM, LINE, COUNT):
    if len(LINE.strip()) > 0:
        print(COUNT)
    else:
        error()


def dodec(ITEM, LINE, COUNT, NEW_COUNT):
    NEW_LINE = sub("count:[0-9]+", f"count:{NEW_COUNT}", LINE)
    if len(LINE.strip()) > 0:
        run([environ["TODO_FULL_SH"], "command", "do", str(ITEM)])
        if NEW_COUNT > 0:
            run([environ["TODO_FULL_SH"], "command", "add", NEW_LINE])


if argv[1] == 'usage' or argv[2] == 'usage':
    usage()
    exit()


ITEM = int(argv[2])

with open(environ["TODO_FILE"]) as f:
    LINE = f.readlines()[ITEM-1]

m = search('count:([0-9]+)', LINE)
COUNT = (int(m.group(1)) if m is not None else 1)

if len(argv) <= 3:
    print_count(ITEM, LINE, COUNT)
    exit()

if argv[3] in ['done', 'do']:
    dodec(ITEM, LINE, COUNT, COUNT-1)
    exit()
if argv[3].startswith('='):
    dodec(ITEM, LINE, COUNT, int(argv[3].strip('= ')))
    exit()
if match('^[-+][0-9]+$', argv[3]):
    dodec(ITEM, LINE, COUNT, eval(str(COUNT) + argv[3]))
    exit()
error()
