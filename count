#!/bin/bash
shopt -s extglob

function usage {
  echo "    count help"
  echo "      show help information"
  echo "    count ITEM"
  echo "      show how many of this item is left"
  echo "    count ITEM done"
  echo "      mark an item done and then re-enter it with a decreased (-1) count"
  echo "    count ITEM do"
  echo "      alias for count ITEM done"
  echo "    count ITEM -NUM"
  echo "      mark NUM items as done at once and re-enter it with -NUM count"
  echo "    count ITEM +NUM"
  echo "      mark NUM items as done at once and re-enter it with +NUM count"
  echo "    count ITEM =NUM"
  echo "      mark NUM items as done at once and re-enter it with NUM count"
}

function error {
  echo "Error! Usage:"
  usage
  exit 1
}

function print-count {
  ITEM="$1"
  LINE="$2"
  COUNT="$3"

  if [ ! -z "$LINE" ]; then
    printf "%d\n" "$COUNT"
  else
    return 1
  fi
}

function dodec {
  ITEM="$1"
  LINE="$2"
  COUNT="$3"
  CHANGE_BY="$4"

  if [[ "$CHANGE_BY" =~ =.* ]]; then
    NEW_COUNT=${CHANGE_BY/=/}
  else
    NEW_COUNT=$(($COUNT $CHANGE_BY ))
  fi
  NEW_LINE=$(echo $LINE | sed "s/count:[[:digit:]]\\+/count:$NEW_COUNT/")

  if [[ "$LINE" != "" ]]; then
    "$TODO_FULL_SH" command do "$ITEM"
    if [ $NEW_COUNT -gt 0 ]; then
      "$TODO_FULL_SH" command add "$NEW_LINE"
    fi
  fi
}

[ "$1" = "usage" ] && usage && exit

shift

[ "$1" = "help" ] &&
  echo "Handle count metadata in a todo item:" &&
  usage && exit

ITEM=$1
if ! [[ "$ITEM" =~ ^[0-9]+$ ]]; then
  error
fi

LINE=$(sed "$ITEM!d" "$TODO_FILE")

if echo "$LINE" | grep 'count:' &>/dev/null; then
  COUNT=$(echo "$LINE" | sed 's/.*count:\([[:digit:]]\+.*\)/\1/')
else
  COUNT=1
fi

shift
cmd=$1

case $cmd in
  '')
    print-count "$ITEM" "$LINE" "$COUNT" || error
    ;;
  done|do)
    dodec "$ITEM" "$LINE" "$COUNT" "-1" || error
    ;;
  [=+-]+([0-9]))
    dodec "$ITEM" "$LINE" "$COUNT" "$cmd" || error
    ;;
  *)
    error
    ;;
esac

